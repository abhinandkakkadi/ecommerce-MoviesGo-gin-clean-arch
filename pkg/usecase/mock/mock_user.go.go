// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interface/user.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/abhinandkakkadi/ecommerce-MoviesGo-gin-clean-arch/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(address models.AddressInfo, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", address, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(address, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), address, userID)
}

// AddToWishList mocks base method.
func (m *MockUserUseCase) AddToWishList(productID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToWishList", productID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToWishList indicates an expected call of AddToWishList.
func (mr *MockUserUseCaseMockRecorder) AddToWishList(productID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToWishList", reflect.TypeOf((*MockUserUseCase)(nil).AddToWishList), productID, userID)
}

// ApplyReferral mocks base method.
func (m *MockUserUseCase) ApplyReferral(userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyReferral", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyReferral indicates an expected call of ApplyReferral.
func (mr *MockUserUseCaseMockRecorder) ApplyReferral(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyReferral", reflect.TypeOf((*MockUserUseCase)(nil).ApplyReferral), userID)
}

// Checkout mocks base method.
func (m *MockUserUseCase) Checkout(userID int) (models.CheckoutDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", userID)
	ret0, _ := ret[0].(models.CheckoutDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checkout indicates an expected call of Checkout.
func (mr *MockUserUseCaseMockRecorder) Checkout(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockUserUseCase)(nil).Checkout), userID)
}

// GetAllAddress mocks base method.
func (m *MockUserUseCase) GetAllAddress(userID int) ([]models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAddress", userID)
	ret0, _ := ret[0].([]models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAddress indicates an expected call of GetAllAddress.
func (mr *MockUserUseCaseMockRecorder) GetAllAddress(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAddress", reflect.TypeOf((*MockUserUseCase)(nil).GetAllAddress), userID)
}

// GetWishList mocks base method.
func (m *MockUserUseCase) GetWishList(userID int) ([]models.WishListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishList", userID)
	ret0, _ := ret[0].([]models.WishListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishList indicates an expected call of GetWishList.
func (mr *MockUserUseCaseMockRecorder) GetWishList(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishList", reflect.TypeOf((*MockUserUseCase)(nil).GetWishList), userID)
}

// LoginHandler mocks base method.
func (m *MockUserUseCase) LoginHandler(user models.UserLogin) (models.TokenUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginHandler", user)
	ret0, _ := ret[0].(models.TokenUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginHandler indicates an expected call of LoginHandler.
func (mr *MockUserUseCaseMockRecorder) LoginHandler(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginHandler", reflect.TypeOf((*MockUserUseCase)(nil).LoginHandler), user)
}

// RemoveFromWishList mocks base method.
func (m *MockUserUseCase) RemoveFromWishList(productID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromWishList", productID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromWishList indicates an expected call of RemoveFromWishList.
func (mr *MockUserUseCaseMockRecorder) RemoveFromWishList(productID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromWishList", reflect.TypeOf((*MockUserUseCase)(nil).RemoveFromWishList), productID, userID)
}

// ResetPassword mocks base method.
func (m *MockUserUseCase) ResetPassword(userID int, pass models.ResetPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", userID, pass)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockUserUseCaseMockRecorder) ResetPassword(userID, pass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockUserUseCase)(nil).ResetPassword), userID, pass)
}

// UpdateAddress mocks base method.
func (m *MockUserUseCase) UpdateAddress(address models.AddressInfo, addressID, userID int) (models.AddressInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", address, addressID, userID)
	ret0, _ := ret[0].(models.AddressInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserUseCaseMockRecorder) UpdateAddress(address, addressID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserUseCase)(nil).UpdateAddress), address, addressID, userID)
}

// UpdatePassword mocks base method.
func (m *MockUserUseCase) UpdatePassword(ctx context.Context, body models.UpdatePassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockUserUseCaseMockRecorder) UpdatePassword(ctx, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserUseCase)(nil).UpdatePassword), ctx, body)
}

// UpdateUserDetails mocks base method.
func (m *MockUserUseCase) UpdateUserDetails(body models.UsersProfileDetails, userID int) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetails", body, userID)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockUserUseCaseMockRecorder) UpdateUserDetails(body, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockUserUseCase)(nil).UpdateUserDetails), body, ctx)
}

// UserDetails mocks base method.
func (m *MockUserUseCase) UserDetails(userID int) (models.UsersProfileDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDetails", userID)
	ret0, _ := ret[0].(models.UsersProfileDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDetails indicates an expected call of UserDetails.
func (mr *MockUserUseCaseMockRecorder) UserDetails(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDetails", reflect.TypeOf((*MockUserUseCase)(nil).UserDetails), userID)
}

// UserSignUp mocks base method.
func (m *MockUserUseCase) UserSignUp(user models.UserDetails) (models.TokenUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", user)
	ret0, _ := ret[0].(models.TokenUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserUseCaseMockRecorder) UserSignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserUseCase)(nil).UserSignUp), user)
}
