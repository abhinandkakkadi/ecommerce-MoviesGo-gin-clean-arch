// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/coupon.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/abhinandkakkadi/ecommerce-MoviesGo-gin-clean-arch/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCouponRepository is a mock of CouponRepository interface.
type MockCouponRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCouponRepositoryMockRecorder
}

// MockCouponRepositoryMockRecorder is the mock recorder for MockCouponRepository.
type MockCouponRepositoryMockRecorder struct {
	mock *MockCouponRepository
}

// NewMockCouponRepository creates a new mock instance.
func NewMockCouponRepository(ctrl *gomock.Controller) *MockCouponRepository {
	mock := &MockCouponRepository{ctrl: ctrl}
	mock.recorder = &MockCouponRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponRepository) EXPECT() *MockCouponRepositoryMockRecorder {
	return m.recorder
}

// AddCategoryOffer mocks base method.
func (m *MockCouponRepository) AddCategoryOffer(categoryOffer models.CategoryOfferReceiver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCategoryOffer", categoryOffer)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCategoryOffer indicates an expected call of AddCategoryOffer.
func (mr *MockCouponRepositoryMockRecorder) AddCategoryOffer(categoryOffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCategoryOffer", reflect.TypeOf((*MockCouponRepository)(nil).AddCategoryOffer), categoryOffer)
}

// AddCoupon mocks base method.
func (m *MockCouponRepository) AddCoupon(coupon models.AddCoupon) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoupon", coupon)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoupon indicates an expected call of AddCoupon.
func (mr *MockCouponRepositoryMockRecorder) AddCoupon(coupon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoupon", reflect.TypeOf((*MockCouponRepository)(nil).AddCoupon), coupon)
}

// AddProductOffer mocks base method.
func (m *MockCouponRepository) AddProductOffer(productOffer models.ProductOfferReceiver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProductOffer", productOffer)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProductOffer indicates an expected call of AddProductOffer.
func (mr *MockCouponRepositoryMockRecorder) AddProductOffer(productOffer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProductOffer", reflect.TypeOf((*MockCouponRepository)(nil).AddProductOffer), productOffer)
}

// CheckIfOfferAlreadyUsed mocks base method.
func (m *MockCouponRepository) CheckIfOfferAlreadyUsed(offerDetails models.OfferResponse, product_id, userID int) (models.OfferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfOfferAlreadyUsed", offerDetails, product_id, userID)
	ret0, _ := ret[0].(models.OfferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfOfferAlreadyUsed indicates an expected call of CheckIfOfferAlreadyUsed.
func (mr *MockCouponRepositoryMockRecorder) CheckIfOfferAlreadyUsed(offerDetails, product_id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfOfferAlreadyUsed", reflect.TypeOf((*MockCouponRepository)(nil).CheckIfOfferAlreadyUsed), offerDetails, product_id, userID)
}

// CouponAlreadyExpired mocks base method.
func (m *MockCouponRepository) CouponAlreadyExpired(couponID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CouponAlreadyExpired", couponID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CouponAlreadyExpired indicates an expected call of CouponAlreadyExpired.
func (mr *MockCouponRepositoryMockRecorder) CouponAlreadyExpired(couponID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CouponAlreadyExpired", reflect.TypeOf((*MockCouponRepository)(nil).CouponAlreadyExpired), couponID)
}

// CouponExist mocks base method.
func (m *MockCouponRepository) CouponExist(couponName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CouponExist", couponName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CouponExist indicates an expected call of CouponExist.
func (mr *MockCouponRepositoryMockRecorder) CouponExist(couponName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CouponExist", reflect.TypeOf((*MockCouponRepository)(nil).CouponExist), couponName)
}

// CouponRevalidateIfExpired mocks base method.
func (m *MockCouponRepository) CouponRevalidateIfExpired(couponName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CouponRevalidateIfExpired", couponName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CouponRevalidateIfExpired indicates an expected call of CouponRevalidateIfExpired.
func (mr *MockCouponRepositoryMockRecorder) CouponRevalidateIfExpired(couponName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CouponRevalidateIfExpired", reflect.TypeOf((*MockCouponRepository)(nil).CouponRevalidateIfExpired), couponName)
}

// DiscountReason mocks base method.
func (m *MockCouponRepository) DiscountReason(userID int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscountReason", userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiscountReason indicates an expected call of DiscountReason.
func (mr *MockCouponRepositoryMockRecorder) DiscountReason(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscountReason", reflect.TypeOf((*MockCouponRepository)(nil).DiscountReason), userID)
}

// ExistCoupon mocks base method.
func (m *MockCouponRepository) ExistCoupon(couponID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistCoupon", couponID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistCoupon indicates an expected call of ExistCoupon.
func (mr *MockCouponRepositoryMockRecorder) ExistCoupon(couponID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistCoupon", reflect.TypeOf((*MockCouponRepository)(nil).ExistCoupon), couponID)
}

// GetCoupon mocks base method.
func (m *MockCouponRepository) GetCoupon() ([]models.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoupon")
	ret0, _ := ret[0].([]models.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoupon indicates an expected call of GetCoupon.
func (mr *MockCouponRepositoryMockRecorder) GetCoupon() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoupon", reflect.TypeOf((*MockCouponRepository)(nil).GetCoupon))
}

// GetPriceBasedOnOffer mocks base method.
func (m *MockCouponRepository) GetPriceBasedOnOffer(product_id, userID int) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceBasedOnOffer", product_id, userID)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceBasedOnOffer indicates an expected call of GetPriceBasedOnOffer.
func (mr *MockCouponRepositoryMockRecorder) GetPriceBasedOnOffer(product_id, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceBasedOnOffer", reflect.TypeOf((*MockCouponRepository)(nil).GetPriceBasedOnOffer), product_id, userID)
}

// GetReferralAmount mocks base method.
func (m *MockCouponRepository) GetReferralAmount(userID int) (models.ReferralAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReferralAmount", userID)
	ret0, _ := ret[0].(models.ReferralAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReferralAmount indicates an expected call of GetReferralAmount.
func (mr *MockCouponRepositoryMockRecorder) GetReferralAmount(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReferralAmount", reflect.TypeOf((*MockCouponRepository)(nil).GetReferralAmount), userID)
}

// OfferDetails mocks base method.
func (m *MockCouponRepository) OfferDetails(productID int, genre string) (models.CombinedOffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferDetails", productID, genre)
	ret0, _ := ret[0].(models.CombinedOffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferDetails indicates an expected call of OfferDetails.
func (mr *MockCouponRepositoryMockRecorder) OfferDetails(productID, genre interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferDetails", reflect.TypeOf((*MockCouponRepository)(nil).OfferDetails), productID, genre)
}

// OfferUpdate mocks base method.
func (m *MockCouponRepository) OfferUpdate(offerDetails models.OfferResponse, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUpdate", offerDetails, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// OfferUpdate indicates an expected call of OfferUpdate.
func (mr *MockCouponRepositoryMockRecorder) OfferUpdate(offerDetails, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUpdate", reflect.TypeOf((*MockCouponRepository)(nil).OfferUpdate), offerDetails, userID)
}
