// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interface/products.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/abhinandkakkadi/ecommerce-MoviesGo-gin-clean-arch/pkg/domain"
	models "github.com/abhinandkakkadi/ecommerce-MoviesGo-gin-clean-arch/pkg/utils/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProductRepository) AddProduct(product models.ProductsReceiver) (models.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", product)
	ret0, _ := ret[0].(models.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductRepositoryMockRecorder) AddProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProductRepository)(nil).AddProduct), product)
}

// CheckValidityOfCategory mocks base method.
func (m *MockProductRepository) CheckValidityOfCategory(data map[string]int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckValidityOfCategory", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckValidityOfCategory indicates an expected call of CheckValidityOfCategory.
func (mr *MockProductRepositoryMockRecorder) CheckValidityOfCategory(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckValidityOfCategory", reflect.TypeOf((*MockProductRepository)(nil).CheckValidityOfCategory), data)
}

// DeleteProduct mocks base method.
func (m *MockProductRepository) DeleteProduct(product_id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", product_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepositoryMockRecorder) DeleteProduct(product_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepository)(nil).DeleteProduct), product_id)
}

// DoesProductExist mocks base method.
func (m *MockProductRepository) DoesProductExist(productID int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoesProductExist", productID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoesProductExist indicates an expected call of DoesProductExist.
func (mr *MockProductRepositoryMockRecorder) DoesProductExist(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoesProductExist", reflect.TypeOf((*MockProductRepository)(nil).DoesProductExist), productID)
}

// GetGenres mocks base method.
func (m *MockProductRepository) GetGenres() ([]domain.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenres")
	ret0, _ := ret[0].([]domain.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenres indicates an expected call of GetGenres.
func (mr *MockProductRepositoryMockRecorder) GetGenres() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenres", reflect.TypeOf((*MockProductRepository)(nil).GetGenres))
}

// GetProductFromCategory mocks base method.
func (m *MockProductRepository) GetProductFromCategory(data map[string]int) ([]models.ProductsBrief, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductFromCategory", data)
	ret0, _ := ret[0].([]models.ProductsBrief)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductFromCategory indicates an expected call of GetProductFromCategory.
func (mr *MockProductRepositoryMockRecorder) GetProductFromCategory(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductFromCategory", reflect.TypeOf((*MockProductRepository)(nil).GetProductFromCategory), data)
}

// SearchItemBasedOnPrefix mocks base method.
func (m *MockProductRepository) SearchItemBasedOnPrefix(prefix string) ([]models.ProductsBrief, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchItemBasedOnPrefix", prefix)
	ret0, _ := ret[0].([]models.ProductsBrief)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchItemBasedOnPrefix indicates an expected call of SearchItemBasedOnPrefix.
func (mr *MockProductRepositoryMockRecorder) SearchItemBasedOnPrefix(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchItemBasedOnPrefix", reflect.TypeOf((*MockProductRepository)(nil).SearchItemBasedOnPrefix), prefix)
}

// ShowAllProducts mocks base method.
func (m *MockProductRepository) ShowAllProducts(page, count int) ([]models.ProductsBrief, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowAllProducts", page, count)
	ret0, _ := ret[0].([]models.ProductsBrief)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowAllProducts indicates an expected call of ShowAllProducts.
func (mr *MockProductRepositoryMockRecorder) ShowAllProducts(page, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowAllProducts", reflect.TypeOf((*MockProductRepository)(nil).ShowAllProducts), page, count)
}

// ShowIndividualProducts mocks base method.
func (m *MockProductRepository) ShowIndividualProducts(sku string) (models.ProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowIndividualProducts", sku)
	ret0, _ := ret[0].(models.ProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowIndividualProducts indicates an expected call of ShowIndividualProducts.
func (mr *MockProductRepositoryMockRecorder) ShowIndividualProducts(sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowIndividualProducts", reflect.TypeOf((*MockProductRepository)(nil).ShowIndividualProducts), sku)
}

// UpdateQuantity mocks base method.
func (m *MockProductRepository) UpdateQuantity(productID, quantity int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuantity", productID, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuantity indicates an expected call of UpdateQuantity.
func (mr *MockProductRepositoryMockRecorder) UpdateQuantity(productID, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuantity", reflect.TypeOf((*MockProductRepository)(nil).UpdateQuantity), productID, quantity)
}
